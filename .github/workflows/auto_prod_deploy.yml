name: Deploy to Production!!!
on: 
  push:
    branches: 
      - master

jobs:
  create_tag:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.previous_tag.outputs.tag_version }}
      output2: ${{ steps.tag.outputs.tag_version }}
    env:
      GITHUB_TOKEN: ${{ secrets.github_token }}  
    steps:       
      - name: checkout repo
        uses: actions/checkout@v3
        with:
          repository: ${{github.repository}}.wiki

      - name: Upgrade NPM
        run: npm install -g npm

      - name: generate the version number
        id: previous_tag
        run: |
            ls -al
            var=$(cat Home.textile | grep PRODUCTION | cut -d":" -f2 )
            echo $var
            echo "::set-output name=tag_version::$(echo ${var})"
     


      - name: get pull-request-label
        id: manual
        uses: actions-ecosystem/action-get-merged-pull-request@v1.0.1
        with:
          github_token: ${{ secrets.github_token }}

      - name: debug tag
        shell: bash
        run: |
           echo "${{ steps.previous_tag.outputs.tag_version }}"
      
      - name: create tag name
        id: tag
        shell: bash
        run: |
            echo "${{ steps.manual.outputs.labels }}"
            # tag=$(git describe --tags --abbrev=0 | sed 's/v//')
            version="${{ steps.manual.outputs.labels }}"
            echo "${{ steps.tag.outputs.tag_version }}"
            tag=$(echo ${{ steps.previous_tag.outputs.tag_version }} | sed 's/v//')
            IFS='.' read -r -a tag_array <<< "$tag"

            if [[ "${version}"  == "minor" ]]
            then
              temp=${tag_array[1]}
              ((temp=temp+1))
              echo "${temp}"
              null_value=0
              newTag="v${tag_array[0]}.${temp}.${null_value}"
              echo "latest-tag=v${tag_array[0]}.${temp}.${null_value}"  >> $GITHUB_ENV
              echo "::set-output name=tag_version::$(echo ${newTag})"
            elif [[ "${version}" == "major" ]]
            then
              temp=${tag_array[0]}
              ((temp=temp+1))
              echo "${temp}"
              newTag="v${temp}.${tag_array[1]}.${tag_array[2]}"
              echo "latest-tag=v${temp}.${tag_array[1]}.${tag_array[2]}" >> $GITHUB_ENV
              echo "::set-output name=tag_version::$(echo ${newTag})"
            else
              temp=${tag_array[2]}
              ((temp=temp+1))
              echo "${temp}"
              newTag="v${tag_array[0]}.${tag_array[1]}.${temp}"
              
              echo "latest-tag=v${tag_array[0]}.${tag_array[1]}.${temp}" >> $GITHUB_ENV
              echo "::set-output name=tag_version::$(echo ${newTag})"
            fi

            echo "New Tag: ${newTag}"